import { readdir, readFile, writeFile } from 'fs/promises';
import { join, basename } from 'path';

async function generateBlogLoader() {
    const blogDir = 'src/blog';
    const outputFile = 'src/blog/loader.ts';
    
    try {
        const files = await readdir(blogDir);
        
        const mdxFiles = files.filter(file => file.endsWith('.mdx'));
        
        if (mdxFiles.length === 0) {
            console.log('No MDX files found in blog directory');
            return;
        }
        
        const imports = [];
        const addPostCalls = [];
        
        for (const file of mdxFiles) {
            const slug = basename(file, '.mdx');
            const varName = slug.replace(/[^a-zA-Z0-9]/g, '_');
            const filePath = join(blogDir, file);
            
            const content = await readFile(filePath, 'utf-8');
            
            const escapedContent = content
                .replace(/\\/g, '\\\\')
                .replace(/`/g, '\\`')
                .replace(/\$/g, '\\$');
            
            imports.push(`const ${varName} = \`${escapedContent}\`;`);
            addPostCalls.push(`addPost("${slug}", ${varName});`);
        }
        
        const loaderContent = `import { addPost } from "../api";

// Auto-generated blog post loader
// This file is automatically generated by scripts/generate-blog-loader.mjs
// Do not edit manually - your changes will be overwritten

${imports.join('\n\n')}

// Load all posts
${addPostCalls.join('\n')}
`;
        
        await writeFile(outputFile, loaderContent, 'utf-8');
        console.log(`âœ“ Generated blog loader with ${mdxFiles.length} post(s)`);
        
    } catch (error) {
        console.error('Error generating blog loader:', error);
        process.exit(1);
    }
}

generateBlogLoader();
